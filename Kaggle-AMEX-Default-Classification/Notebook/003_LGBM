{"cells":[{"cell_type":"markdown","metadata":{"id":"p71WUtK64WK2"},"source":["# Setup"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3984,"status":"ok","timestamp":1661840298908,"user":{"displayName":"Kim Keonho","userId":"09858268289707732278"},"user_tz":-540},"id":"5M-azC5XzzwO","outputId":"8cfcf6ad-1108-4790-943a-11f30f25708f"},"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting colorama\n","  Downloading colorama-0.4.5-py2.py3-none-any.whl (16 kB)\n","Installing collected packages: colorama\n","Successfully installed colorama-0.4.5\n"]}],"source":["!pip install colorama"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":78425,"status":"ok","timestamp":1661840377305,"user":{"displayName":"Kim Keonho","userId":"09858268289707732278"},"user_tz":-540},"id":"Mp4t4M9LHzdS","outputId":"e66bfcae-4737-4b86-86de-9456795edc89"},"outputs":[{"output_type":"stream","name":"stdout","text":["/usr/local/lib/python3.7/dist-packages/pip/_internal/commands/install.py:232: UserWarning: Disabling all use of wheels due to the use of --build-option / --global-option / --install-option.\n","  cmdoptions.check_install_build_global(options)\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: lightgbm in /usr/local/lib/python3.7/dist-packages (2.2.3)\n","Collecting lightgbm\n","  Downloading lightgbm-3.3.2.tar.gz (1.5 MB)\n","\u001b[K     |████████████████████████████████| 1.5 MB 4.4 MB/s \n","\u001b[?25hRequirement already satisfied: wheel in /usr/local/lib/python3.7/dist-packages (from lightgbm) (0.37.1)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from lightgbm) (1.21.6)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from lightgbm) (1.7.3)\n","Requirement already satisfied: scikit-learn!=0.22.0 in /usr/local/lib/python3.7/dist-packages (from lightgbm) (1.0.2)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn!=0.22.0->lightgbm) (3.1.0)\n","Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.7/dist-packages (from scikit-learn!=0.22.0->lightgbm) (1.1.0)\n","Skipping wheel build for lightgbm, due to binaries being disabled for it.\n","Installing collected packages: lightgbm\n","  Attempting uninstall: lightgbm\n","    Found existing installation: lightgbm 2.2.3\n","    Uninstalling lightgbm-2.2.3:\n","      Successfully uninstalled lightgbm-2.2.3\n","    Running setup.py install for lightgbm ... \u001b[?25l\u001b[?25hdone\n","Successfully installed lightgbm-3.3.2\n"]}],"source":["!pip install --upgrade lightgbm --install-option=--gpu"]},{"cell_type":"markdown","metadata":{"id":"KhzxRb4mThqL"},"source":["# Prep"]},{"cell_type":"markdown","metadata":{"id":"j8t75W6D1WhE"},"source":["## import libraries"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":340138,"status":"ok","timestamp":1661840717427,"user":{"displayName":"Kim Keonho","userId":"09858268289707732278"},"user_tz":-540},"id":"alsueLRPys2-","outputId":"4a274c4c-e9f2-41ad-a05c-3350a6ba903c"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive/\n","/content/drive/MyDrive/Kaggle/AMEX_DEFAULT\n","000_ensemble.csv  \u001b[0m\u001b[01;34mcatboost_info\u001b[0m/       \u001b[01;34mKeep\u001b[0m/\n","010_lgbm.csv      \u001b[01;34mdata\u001b[0m/                \u001b[01;34mNotebooks\u001b[0m/\n","020_catboost.csv  \u001b[01;34mfeature_importance\u001b[0m/  simple_average.ipynb\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive/')\n","%cd /content/drive/MyDrive/Kaggle/AMEX_DEFAULT/\n","%ls"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1LAkK6StT2i6"},"outputs":[],"source":["import datetime\n","import os\n","import warnings \n","import gc; gc.enable()\n","\n","import matplotlib.pyplot as plt \n","import seaborn as sns\n","import pandas as pd\n","import numpy as np\n","import random\n","from tqdm.notebook import tqdm\n","\n","import lightgbm as lgb\n","from lightgbm import early_stopping, log_evaluation\n","from sklearn.model_selection import StratifiedKFold\n","\n","from colorama import Fore, Back, Style"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"TRlFajnJI8p-"},"outputs":[],"source":["def seed_everything(seed: int = 42):\n","    random.seed(seed)\n","    np.random.seed(seed)\n","    os.environ[\"PYTHONHASHSEED\"] = str(seed)"]},{"cell_type":"markdown","metadata":{"id":"jJwTI1FS1ZJ7"},"source":["## Load Data"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KoeJR_U_UaM4","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1661840755754,"user_tz":-540,"elapsed":36195,"user":{"displayName":"Kim Keonho","userId":"09858268289707732278"}},"outputId":"2bf1741e-bf92-44ec-be3e-535d7f4b0ee2"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":6}],"source":["train = pd.read_parquet('data/agg/train.parquet')\n","test = pd.read_parquet('data/agg/test.parquet')\n","\n","categoricals = ['B_30', 'B_38', 'D_114', 'D_116', 'D_117', 'D_120', 'D_126', 'D_63', 'D_64', 'D_66', 'D_68']\n","featCat = [x for x in train.columns if '_'.join(x.split('_')[:2]) in categoricals and not x.endswith('COND_PROB')]\n","featCont = [x for x in train.columns if x not in featCat + ['customer_ID', 'target']]\n","\n","train[featCat] = train[featCat].astype('category')\n","test[featCat] = test[featCat].astype('category')\n","gc.collect() "]},{"cell_type":"markdown","metadata":{"id":"xLBqGjkT4cDB"},"source":["# LIGHTGBM"]},{"cell_type":"markdown","metadata":{"id":"0KC-zIhf6s04"},"source":["## METRIC"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xZHUAAbk1KoX"},"outputs":[],"source":["# ====================================================\n","# Amex metric\n","# ====================================================\n","def amex_metric(y_true, y_pred):\n","    labels = np.transpose(np.array([y_true, y_pred]))\n","    labels = labels[labels[:, 1].argsort()[::-1]]\n","    weights = np.where(labels[:,0]==0, 20, 1)\n","    cut_vals = labels[np.cumsum(weights) <= int(0.04 * np.sum(weights))]\n","    top_four = np.sum(cut_vals[:,0]) / np.sum(labels[:,0])\n","    gini = [0,0]\n","    for i in [1,0]:\n","        labels = np.transpose(np.array([y_true, y_pred]))\n","        labels = labels[labels[:, i].argsort()[::-1]]\n","        weight = np.where(labels[:,0]==0, 20, 1)\n","        weight_random = np.cumsum(weight / np.sum(weight))\n","        total_pos = np.sum(labels[:, 0] *  weight)\n","        cum_pos_found = np.cumsum(labels[:, 0] * weight)\n","        lorentz = cum_pos_found / total_pos\n","        gini[i] = np.sum((lorentz - weight_random) * weight)\n","    return 0.5 * (gini[1]/gini[0] + top_four)\n","\n","# ====================================================\n","# LGBM amex metric\n","# ====================================================\n","def lgb_amex_metric(y_pred, y_true):\n","    y_true = y_true.get_label()\n","    return 'amex_metric', amex_metric(y_true, y_pred), True"]},{"cell_type":"markdown","metadata":{"id":"Ii62mI0Gz00s"},"source":["## Early Stopping"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"IS8dS_KdzvOm"},"outputs":[],"source":["import pickle\n","\n","class DartEarlyStopping(object):\n","    \"\"\"DartEarlyStopping\"\"\"\n","\n","    def __init__(self, data_name, monitor_metric, stopping_round):\n","        self.data_name = data_name\n","        self.monitor_metric = monitor_metric\n","        self.stopping_round = stopping_round\n","        self.best_score = None\n","        self.best_model = None\n","        self.best_score_list = []\n","        self.best_iter = 0\n","\n","    def _is_higher_score(self, metric_score, is_higher_better):\n","        if self.best_score is None:\n","            return True\n","        return (self.best_score < metric_score) if is_higher_better else (self.best_score > metric_score)\n","\n","    def _deepcopy(self, x):\n","        return pickle.loads(pickle.dumps(x))\n","\n","    def __call__(self, env):\n","        evals = env.evaluation_result_list\n","        for data, metric, score, is_higher_better in evals:\n","            if data != self.data_name or metric != self.monitor_metric:\n","                continue\n","            if not self._is_higher_score(score, is_higher_better):\n","                if env.iteration - self.best_iter > self.stopping_round:\n","                    eval_result_str = '\\t'.join([lgb.callback._format_eval_result(x) for x in self.best_score_list])\n","                    lgb.basic._log_info(f\"Early stopping, best iteration is:\\n[{self.best_iter+1}]\\t{eval_result_str}\") \n","                    lgb.basic._log_info(f\"You can get best model by \\\"DartEarlyStopping.best_model\\\"\")\n","                    raise lgb.callback.EarlyStopException(self.best_iter, self.best_score_list)\n","                return\n","\n","            self.best_model = self._deepcopy(env.model)\n","            self.best_iter = env.iteration\n","            self.best_score_list = evals\n","            self.best_score = score\n","            return\n","        \n","        raise ValueError(\"monitoring metric not found\")"]},{"cell_type":"markdown","metadata":{"id":"lZ6PqfuN6v4u"},"source":["## TRAINING"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"aNWjQDTZXQe-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1661840758693,"user_tz":-540,"elapsed":2949,"user":{"displayName":"Kim Keonho","userId":"09858268289707732278"}},"outputId":"1a22953f-4abf-4a1d-a1b9-4e60f54cb5a2"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":9}],"source":["OUTPUT = pd.DataFrame(\n","    {\n","        'customer_ID' : test['customer_ID'],\n","        'prediction' : np.zeros(test.shape[0])\n","     }\n",")\n","\n","FEATURES = [x for x in train.columns if x not in ['customer_ID', 'target']]\n","\n","X = train[FEATURES]\n","y = train['target']\n","\n","INPUT_TEST = test[FEATURES]\n","\n","OUTPUT_PRED = np.zeros(test.shape[0])\n","\n","del train \n","del test\n","gc.collect()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wF_Vg3hiMjSK","outputId":"cde19bf5-104b-475a-d25f-46242ca9edc1"},"outputs":[{"output_type":"stream","name":"stdout","text":["--------------------------------------------------\n","\u001b[32m\u001b[1m SEED 42 STRAT \u001b[0m\n","[100]\ttraining's binary_logloss: 0.315973\ttraining's amex_metric: 0.759742\tvalid_1's binary_logloss: 0.319416\tvalid_1's amex_metric: 0.75378\n","[200]\ttraining's binary_logloss: 0.297414\ttraining's amex_metric: 0.768356\tvalid_1's binary_logloss: 0.30166\tvalid_1's amex_metric: 0.760955\n","[300]\ttraining's binary_logloss: 0.271592\ttraining's amex_metric: 0.779674\tvalid_1's binary_logloss: 0.277872\tvalid_1's amex_metric: 0.769614\n","[400]\ttraining's binary_logloss: 0.264244\ttraining's amex_metric: 0.785708\tvalid_1's binary_logloss: 0.27188\tvalid_1's amex_metric: 0.773625\n","[500]\ttraining's binary_logloss: 0.256559\ttraining's amex_metric: 0.791855\tvalid_1's binary_logloss: 0.26585\tvalid_1's amex_metric: 0.778015\n","[600]\ttraining's binary_logloss: 0.251996\ttraining's amex_metric: 0.796735\tvalid_1's binary_logloss: 0.262994\tvalid_1's amex_metric: 0.780035\n","[700]\ttraining's binary_logloss: 0.24477\ttraining's amex_metric: 0.804634\tvalid_1's binary_logloss: 0.258685\tvalid_1's amex_metric: 0.784501\n","[800]\ttraining's binary_logloss: 0.239082\ttraining's amex_metric: 0.810103\tvalid_1's binary_logloss: 0.255961\tvalid_1's amex_metric: 0.785823\n","[900]\ttraining's binary_logloss: 0.233913\ttraining's amex_metric: 0.815901\tvalid_1's binary_logloss: 0.253842\tvalid_1's amex_metric: 0.787457\n","[1000]\ttraining's binary_logloss: 0.231409\ttraining's amex_metric: 0.819112\tvalid_1's binary_logloss: 0.253381\tvalid_1's amex_metric: 0.78794\n","[1100]\ttraining's binary_logloss: 0.226793\ttraining's amex_metric: 0.823893\tvalid_1's binary_logloss: 0.251881\tvalid_1's amex_metric: 0.788417\n","[1200]\ttraining's binary_logloss: 0.224584\ttraining's amex_metric: 0.826662\tvalid_1's binary_logloss: 0.25131\tvalid_1's amex_metric: 0.788599\n","[1300]\ttraining's binary_logloss: 0.221987\ttraining's amex_metric: 0.8304\tvalid_1's binary_logloss: 0.250789\tvalid_1's amex_metric: 0.788749\n","[1400]\ttraining's binary_logloss: 0.218354\ttraining's amex_metric: 0.834148\tvalid_1's binary_logloss: 0.249549\tvalid_1's amex_metric: 0.789654\n","[1500]\ttraining's binary_logloss: 0.21623\ttraining's amex_metric: 0.837205\tvalid_1's binary_logloss: 0.249086\tvalid_1's amex_metric: 0.790048\n","[1600]\ttraining's binary_logloss: 0.212177\ttraining's amex_metric: 0.842283\tvalid_1's binary_logloss: 0.248688\tvalid_1's amex_metric: 0.790685\n","[1700]\ttraining's binary_logloss: 0.20919\ttraining's amex_metric: 0.845875\tvalid_1's binary_logloss: 0.247874\tvalid_1's amex_metric: 0.790621\n","[1800]\ttraining's binary_logloss: 0.207044\ttraining's amex_metric: 0.849398\tvalid_1's binary_logloss: 0.24732\tvalid_1's amex_metric: 0.790597\n","[1900]\ttraining's binary_logloss: 0.204459\ttraining's amex_metric: 0.852757\tvalid_1's binary_logloss: 0.247049\tvalid_1's amex_metric: 0.791193\n","[2000]\ttraining's binary_logloss: 0.201295\ttraining's amex_metric: 0.856959\tvalid_1's binary_logloss: 0.246469\tvalid_1's amex_metric: 0.791094\n","[2100]\ttraining's binary_logloss: 0.199061\ttraining's amex_metric: 0.860489\tvalid_1's binary_logloss: 0.246039\tvalid_1's amex_metric: 0.790919\n","[2200]\ttraining's binary_logloss: 0.197042\ttraining's amex_metric: 0.863278\tvalid_1's binary_logloss: 0.245614\tvalid_1's amex_metric: 0.79108\n","[2300]\ttraining's binary_logloss: 0.194422\ttraining's amex_metric: 0.866724\tvalid_1's binary_logloss: 0.245241\tvalid_1's amex_metric: 0.791526\n","[2400]\ttraining's binary_logloss: 0.192218\ttraining's amex_metric: 0.869734\tvalid_1's binary_logloss: 0.244702\tvalid_1's amex_metric: 0.791927\n","[2500]\ttraining's binary_logloss: 0.19018\ttraining's amex_metric: 0.873485\tvalid_1's binary_logloss: 0.244332\tvalid_1's amex_metric: 0.791663\n","[2600]\ttraining's binary_logloss: 0.18785\ttraining's amex_metric: 0.876703\tvalid_1's binary_logloss: 0.243941\tvalid_1's amex_metric: 0.791234\n","[2700]\ttraining's binary_logloss: 0.1853\ttraining's amex_metric: 0.881109\tvalid_1's binary_logloss: 0.243623\tvalid_1's amex_metric: 0.790755\n","[2800]\ttraining's binary_logloss: 0.183357\ttraining's amex_metric: 0.883093\tvalid_1's binary_logloss: 0.243123\tvalid_1's amex_metric: 0.791167\n","[2900]\ttraining's binary_logloss: 0.180867\ttraining's amex_metric: 0.887065\tvalid_1's binary_logloss: 0.242905\tvalid_1's amex_metric: 0.790429\n","[3000]\ttraining's binary_logloss: 0.178233\ttraining's amex_metric: 0.891239\tvalid_1's binary_logloss: 0.242633\tvalid_1's amex_metric: 0.790838\n","Early stopping, best iteration is:\n","[2560]\ttraining's binary_logloss: 0.188647\ttraining's amex_metric: 0.875319\tvalid_1's binary_logloss: 0.244053\tvalid_1's amex_metric: 0.792697\n","You can get best model by \"DartEarlyStopping.best_model\"\n","\u001b[32m\u001b[1mFold 1 \n"," 13:59 \n"," CV Score = 0.7910\u001b[0m\n","[100]\ttraining's binary_logloss: 0.315906\ttraining's amex_metric: 0.759051\tvalid_1's binary_logloss: 0.315706\tvalid_1's amex_metric: 0.754067\n","[200]\ttraining's binary_logloss: 0.298075\ttraining's amex_metric: 0.76716\tvalid_1's binary_logloss: 0.298581\tvalid_1's amex_metric: 0.76131\n","[300]\ttraining's binary_logloss: 0.272276\ttraining's amex_metric: 0.778489\tvalid_1's binary_logloss: 0.274195\tvalid_1's amex_metric: 0.770725\n","[400]\ttraining's binary_logloss: 0.264547\ttraining's amex_metric: 0.785597\tvalid_1's binary_logloss: 0.267682\tvalid_1's amex_metric: 0.774977\n","[500]\ttraining's binary_logloss: 0.257338\ttraining's amex_metric: 0.792071\tvalid_1's binary_logloss: 0.262349\tvalid_1's amex_metric: 0.77836\n","[600]\ttraining's binary_logloss: 0.252551\ttraining's amex_metric: 0.796515\tvalid_1's binary_logloss: 0.258976\tvalid_1's amex_metric: 0.782367\n","[700]\ttraining's binary_logloss: 0.245599\ttraining's amex_metric: 0.803416\tvalid_1's binary_logloss: 0.254797\tvalid_1's amex_metric: 0.785043\n","[800]\ttraining's binary_logloss: 0.240078\ttraining's amex_metric: 0.809824\tvalid_1's binary_logloss: 0.252256\tvalid_1's amex_metric: 0.78789\n","[900]\ttraining's binary_logloss: 0.234631\ttraining's amex_metric: 0.815456\tvalid_1's binary_logloss: 0.249805\tvalid_1's amex_metric: 0.790391\n","[1000]\ttraining's binary_logloss: 0.232187\ttraining's amex_metric: 0.818802\tvalid_1's binary_logloss: 0.249233\tvalid_1's amex_metric: 0.791823\n","[1100]\ttraining's binary_logloss: 0.227872\ttraining's amex_metric: 0.823289\tvalid_1's binary_logloss: 0.247992\tvalid_1's amex_metric: 0.791454\n","[1200]\ttraining's binary_logloss: 0.225386\ttraining's amex_metric: 0.826624\tvalid_1's binary_logloss: 0.24734\tvalid_1's amex_metric: 0.792373\n","[1300]\ttraining's binary_logloss: 0.22243\ttraining's amex_metric: 0.830034\tvalid_1's binary_logloss: 0.246246\tvalid_1's amex_metric: 0.792521\n","[1400]\ttraining's binary_logloss: 0.219138\ttraining's amex_metric: 0.833582\tvalid_1's binary_logloss: 0.245292\tvalid_1's amex_metric: 0.793529\n","[1500]\ttraining's binary_logloss: 0.216629\ttraining's amex_metric: 0.836989\tvalid_1's binary_logloss: 0.244565\tvalid_1's amex_metric: 0.79286\n","[1600]\ttraining's binary_logloss: 0.212335\ttraining's amex_metric: 0.842635\tvalid_1's binary_logloss: 0.243713\tvalid_1's amex_metric: 0.793774\n","[1700]\ttraining's binary_logloss: 0.209605\ttraining's amex_metric: 0.84634\tvalid_1's binary_logloss: 0.243162\tvalid_1's amex_metric: 0.792736\n","[1800]\ttraining's binary_logloss: 0.207571\ttraining's amex_metric: 0.848928\tvalid_1's binary_logloss: 0.242669\tvalid_1's amex_metric: 0.792667\n","[1900]\ttraining's binary_logloss: 0.204623\ttraining's amex_metric: 0.852208\tvalid_1's binary_logloss: 0.242024\tvalid_1's amex_metric: 0.79261\n","[2000]\ttraining's binary_logloss: 0.201533\ttraining's amex_metric: 0.856345\tvalid_1's binary_logloss: 0.241479\tvalid_1's amex_metric: 0.793038\n","[2100]\ttraining's binary_logloss: 0.199324\ttraining's amex_metric: 0.859304\tvalid_1's binary_logloss: 0.241085\tvalid_1's amex_metric: 0.793756\n","[2200]\ttraining's binary_logloss: 0.19747\ttraining's amex_metric: 0.862793\tvalid_1's binary_logloss: 0.240755\tvalid_1's amex_metric: 0.793382\n","[2300]\ttraining's binary_logloss: 0.194545\ttraining's amex_metric: 0.866647\tvalid_1's binary_logloss: 0.240027\tvalid_1's amex_metric: 0.793278\n","[2400]\ttraining's binary_logloss: 0.192623\ttraining's amex_metric: 0.869631\tvalid_1's binary_logloss: 0.239819\tvalid_1's amex_metric: 0.793631\n","[2500]\ttraining's binary_logloss: 0.190485\ttraining's amex_metric: 0.873021\tvalid_1's binary_logloss: 0.239445\tvalid_1's amex_metric: 0.793344\n","[2600]\ttraining's binary_logloss: 0.188293\ttraining's amex_metric: 0.876017\tvalid_1's binary_logloss: 0.23912\tvalid_1's amex_metric: 0.79384\n","[2700]\ttraining's binary_logloss: 0.185761\ttraining's amex_metric: 0.879794\tvalid_1's binary_logloss: 0.238646\tvalid_1's amex_metric: 0.793208\n","Early stopping, best iteration is:\n","[2244]\ttraining's binary_logloss: 0.196386\ttraining's amex_metric: 0.86431\tvalid_1's binary_logloss: 0.240431\tvalid_1's amex_metric: 0.794315\n","You can get best model by \"DartEarlyStopping.best_model\"\n","\u001b[32m\u001b[1mFold 2 \n"," 05:54 \n"," CV Score = 0.7926\u001b[0m\n","[100]\ttraining's binary_logloss: 0.316412\ttraining's amex_metric: 0.757384\tvalid_1's binary_logloss: 0.317574\tvalid_1's amex_metric: 0.754318\n","[200]\ttraining's binary_logloss: 0.298393\ttraining's amex_metric: 0.766848\tvalid_1's binary_logloss: 0.3001\tvalid_1's amex_metric: 0.762364\n","[300]\ttraining's binary_logloss: 0.271853\ttraining's amex_metric: 0.777855\tvalid_1's binary_logloss: 0.275032\tvalid_1's amex_metric: 0.772714\n","[400]\ttraining's binary_logloss: 0.264015\ttraining's amex_metric: 0.784016\tvalid_1's binary_logloss: 0.268492\tvalid_1's amex_metric: 0.7779\n","[500]\ttraining's binary_logloss: 0.257225\ttraining's amex_metric: 0.790543\tvalid_1's binary_logloss: 0.263499\tvalid_1's amex_metric: 0.781579\n","[600]\ttraining's binary_logloss: 0.252228\ttraining's amex_metric: 0.794973\tvalid_1's binary_logloss: 0.260047\tvalid_1's amex_metric: 0.784603\n","[700]\ttraining's binary_logloss: 0.245199\ttraining's amex_metric: 0.803017\tvalid_1's binary_logloss: 0.255882\tvalid_1's amex_metric: 0.787989\n","[800]\ttraining's binary_logloss: 0.239969\ttraining's amex_metric: 0.809052\tvalid_1's binary_logloss: 0.253793\tvalid_1's amex_metric: 0.791083\n","[900]\ttraining's binary_logloss: 0.234257\ttraining's amex_metric: 0.814743\tvalid_1's binary_logloss: 0.251149\tvalid_1's amex_metric: 0.791664\n","[1000]\ttraining's binary_logloss: 0.23166\ttraining's amex_metric: 0.818452\tvalid_1's binary_logloss: 0.250637\tvalid_1's amex_metric: 0.792509\n","[1100]\ttraining's binary_logloss: 0.227131\ttraining's amex_metric: 0.823045\tvalid_1's binary_logloss: 0.24939\tvalid_1's amex_metric: 0.792877\n","[1200]\ttraining's binary_logloss: 0.224851\ttraining's amex_metric: 0.826368\tvalid_1's binary_logloss: 0.248783\tvalid_1's amex_metric: 0.793239\n","[1300]\ttraining's binary_logloss: 0.222098\ttraining's amex_metric: 0.829793\tvalid_1's binary_logloss: 0.247968\tvalid_1's amex_metric: 0.794797\n","[1400]\ttraining's binary_logloss: 0.218798\ttraining's amex_metric: 0.833497\tvalid_1's binary_logloss: 0.247111\tvalid_1's amex_metric: 0.794297\n","[1500]\ttraining's binary_logloss: 0.216197\ttraining's amex_metric: 0.837002\tvalid_1's binary_logloss: 0.246199\tvalid_1's amex_metric: 0.793833\n","[1600]\ttraining's binary_logloss: 0.211773\ttraining's amex_metric: 0.842262\tvalid_1's binary_logloss: 0.245383\tvalid_1's amex_metric: 0.795303\n","[1700]\ttraining's binary_logloss: 0.209194\ttraining's amex_metric: 0.846022\tvalid_1's binary_logloss: 0.244975\tvalid_1's amex_metric: 0.795022\n","[1800]\ttraining's binary_logloss: 0.207139\ttraining's amex_metric: 0.849393\tvalid_1's binary_logloss: 0.244483\tvalid_1's amex_metric: 0.794991\n","[1900]\ttraining's binary_logloss: 0.204444\ttraining's amex_metric: 0.852711\tvalid_1's binary_logloss: 0.244094\tvalid_1's amex_metric: 0.794109\n","[2000]\ttraining's binary_logloss: 0.201409\ttraining's amex_metric: 0.856927\tvalid_1's binary_logloss: 0.243655\tvalid_1's amex_metric: 0.794554\n","[2100]\ttraining's binary_logloss: 0.199033\ttraining's amex_metric: 0.859998\tvalid_1's binary_logloss: 0.243016\tvalid_1's amex_metric: 0.794425\n","Early stopping, best iteration is:\n","[1672]\ttraining's binary_logloss: 0.209607\ttraining's amex_metric: 0.845228\tvalid_1's binary_logloss: 0.244842\tvalid_1's amex_metric: 0.795784\n","You can get best model by \"DartEarlyStopping.best_model\"\n","\u001b[32m\u001b[1mFold 3 \n"," 50:48 \n"," CV Score = 0.7946\u001b[0m\n","[100]\ttraining's binary_logloss: 0.316169\ttraining's amex_metric: 0.758643\tvalid_1's binary_logloss: 0.319124\tvalid_1's amex_metric: 0.751845\n","[200]\ttraining's binary_logloss: 0.297033\ttraining's amex_metric: 0.767833\tvalid_1's binary_logloss: 0.301279\tvalid_1's amex_metric: 0.759252\n","[300]\ttraining's binary_logloss: 0.271032\ttraining's amex_metric: 0.779193\tvalid_1's binary_logloss: 0.277563\tvalid_1's amex_metric: 0.767672\n","[400]\ttraining's binary_logloss: 0.263469\ttraining's amex_metric: 0.785864\tvalid_1's binary_logloss: 0.271607\tvalid_1's amex_metric: 0.772666\n","[500]\ttraining's binary_logloss: 0.256515\ttraining's amex_metric: 0.791435\tvalid_1's binary_logloss: 0.266709\tvalid_1's amex_metric: 0.776681\n","[600]\ttraining's binary_logloss: 0.251245\ttraining's amex_metric: 0.797232\tvalid_1's binary_logloss: 0.263201\tvalid_1's amex_metric: 0.779505\n","[700]\ttraining's binary_logloss: 0.244608\ttraining's amex_metric: 0.804121\tvalid_1's binary_logloss: 0.259827\tvalid_1's amex_metric: 0.782129\n","[800]\ttraining's binary_logloss: 0.238727\ttraining's amex_metric: 0.810912\tvalid_1's binary_logloss: 0.256995\tvalid_1's amex_metric: 0.784818\n","[900]\ttraining's binary_logloss: 0.233663\ttraining's amex_metric: 0.816338\tvalid_1's binary_logloss: 0.255078\tvalid_1's amex_metric: 0.785757\n","[1000]\ttraining's binary_logloss: 0.230726\ttraining's amex_metric: 0.820148\tvalid_1's binary_logloss: 0.254153\tvalid_1's amex_metric: 0.785805\n","[1100]\ttraining's binary_logloss: 0.226183\ttraining's amex_metric: 0.824207\tvalid_1's binary_logloss: 0.252828\tvalid_1's amex_metric: 0.786586\n","[1200]\ttraining's binary_logloss: 0.224096\ttraining's amex_metric: 0.828\tvalid_1's binary_logloss: 0.252491\tvalid_1's amex_metric: 0.786991\n","[1300]\ttraining's binary_logloss: 0.221297\ttraining's amex_metric: 0.830939\tvalid_1's binary_logloss: 0.251722\tvalid_1's amex_metric: 0.786642\n","[1400]\ttraining's binary_logloss: 0.217914\ttraining's amex_metric: 0.834117\tvalid_1's binary_logloss: 0.250878\tvalid_1's amex_metric: 0.788865\n","[1500]\ttraining's binary_logloss: 0.215611\ttraining's amex_metric: 0.837511\tvalid_1's binary_logloss: 0.250097\tvalid_1's amex_metric: 0.789062\n","[1600]\ttraining's binary_logloss: 0.211316\ttraining's amex_metric: 0.84303\tvalid_1's binary_logloss: 0.24929\tvalid_1's amex_metric: 0.78876\n","[1700]\ttraining's binary_logloss: 0.207951\ttraining's amex_metric: 0.846992\tvalid_1's binary_logloss: 0.248087\tvalid_1's amex_metric: 0.78916\n","[1800]\ttraining's binary_logloss: 0.206283\ttraining's amex_metric: 0.850198\tvalid_1's binary_logloss: 0.247987\tvalid_1's amex_metric: 0.789648\n","[1900]\ttraining's binary_logloss: 0.203353\ttraining's amex_metric: 0.853357\tvalid_1's binary_logloss: 0.247312\tvalid_1's amex_metric: 0.79011\n","[2000]\ttraining's binary_logloss: 0.200242\ttraining's amex_metric: 0.857346\tvalid_1's binary_logloss: 0.246821\tvalid_1's amex_metric: 0.789673\n","[2100]\ttraining's binary_logloss: 0.198229\ttraining's amex_metric: 0.86046\tvalid_1's binary_logloss: 0.246656\tvalid_1's amex_metric: 0.789333\n","[2200]\ttraining's binary_logloss: 0.196381\ttraining's amex_metric: 0.86368\tvalid_1's binary_logloss: 0.246528\tvalid_1's amex_metric: 0.790095\n","[2300]\ttraining's binary_logloss: 0.193495\ttraining's amex_metric: 0.867286\tvalid_1's binary_logloss: 0.24594\tvalid_1's amex_metric: 0.79012\n","[2400]\ttraining's binary_logloss: 0.191196\ttraining's amex_metric: 0.870773\tvalid_1's binary_logloss: 0.245289\tvalid_1's amex_metric: 0.790636\n","[2500]\ttraining's binary_logloss: 0.189333\ttraining's amex_metric: 0.873735\tvalid_1's binary_logloss: 0.245247\tvalid_1's amex_metric: 0.790812\n","[2600]\ttraining's binary_logloss: 0.187007\ttraining's amex_metric: 0.876989\tvalid_1's binary_logloss: 0.244951\tvalid_1's amex_metric: 0.790266\n","[2700]\ttraining's binary_logloss: 0.184568\ttraining's amex_metric: 0.881032\tvalid_1's binary_logloss: 0.244811\tvalid_1's amex_metric: 0.791204\n","[2800]\ttraining's binary_logloss: 0.182554\ttraining's amex_metric: 0.884149\tvalid_1's binary_logloss: 0.24414\tvalid_1's amex_metric: 0.790446\n","Early stopping, best iteration is:\n","[2370]\ttraining's binary_logloss: 0.192092\ttraining's amex_metric: 0.869553\tvalid_1's binary_logloss: 0.24552\tvalid_1's amex_metric: 0.791424\n","You can get best model by \"DartEarlyStopping.best_model\"\n","\u001b[32m\u001b[1mFold 4 \n"," 09:17 \n"," CV Score = 0.7908\u001b[0m\n","[100]\ttraining's binary_logloss: 0.315555\ttraining's amex_metric: 0.757883\tvalid_1's binary_logloss: 0.320276\tvalid_1's amex_metric: 0.752001\n","[200]\ttraining's binary_logloss: 0.297059\ttraining's amex_metric: 0.768362\tvalid_1's binary_logloss: 0.303052\tvalid_1's amex_metric: 0.759536\n","[300]\ttraining's binary_logloss: 0.270909\ttraining's amex_metric: 0.778789\tvalid_1's binary_logloss: 0.278963\tvalid_1's amex_metric: 0.768275\n","[400]\ttraining's binary_logloss: 0.263568\ttraining's amex_metric: 0.786169\tvalid_1's binary_logloss: 0.273056\tvalid_1's amex_metric: 0.772962\n","[500]\ttraining's binary_logloss: 0.256559\ttraining's amex_metric: 0.792515\tvalid_1's binary_logloss: 0.267992\tvalid_1's amex_metric: 0.777256\n","[600]\ttraining's binary_logloss: 0.251659\ttraining's amex_metric: 0.797072\tvalid_1's binary_logloss: 0.264553\tvalid_1's amex_metric: 0.780356\n","[700]\ttraining's binary_logloss: 0.244564\ttraining's amex_metric: 0.804006\tvalid_1's binary_logloss: 0.260578\tvalid_1's amex_metric: 0.784082\n","[800]\ttraining's binary_logloss: 0.238995\ttraining's amex_metric: 0.810436\tvalid_1's binary_logloss: 0.258259\tvalid_1's amex_metric: 0.785004\n","[900]\ttraining's binary_logloss: 0.233625\ttraining's amex_metric: 0.81641\tvalid_1's binary_logloss: 0.255938\tvalid_1's amex_metric: 0.787199\n","[1000]\ttraining's binary_logloss: 0.230904\ttraining's amex_metric: 0.820142\tvalid_1's binary_logloss: 0.255166\tvalid_1's amex_metric: 0.78695\n","[1100]\ttraining's binary_logloss: 0.226695\ttraining's amex_metric: 0.824215\tvalid_1's binary_logloss: 0.254092\tvalid_1's amex_metric: 0.787186\n","[1200]\ttraining's binary_logloss: 0.224021\ttraining's amex_metric: 0.828393\tvalid_1's binary_logloss: 0.253132\tvalid_1's amex_metric: 0.788258\n","[1300]\ttraining's binary_logloss: 0.221106\ttraining's amex_metric: 0.831119\tvalid_1's binary_logloss: 0.252226\tvalid_1's amex_metric: 0.788111\n","[1400]\ttraining's binary_logloss: 0.21775\ttraining's amex_metric: 0.835121\tvalid_1's binary_logloss: 0.251332\tvalid_1's amex_metric: 0.788444\n","[1500]\ttraining's binary_logloss: 0.215617\ttraining's amex_metric: 0.837914\tvalid_1's binary_logloss: 0.250851\tvalid_1's amex_metric: 0.788693\n","[1600]\ttraining's binary_logloss: 0.211176\ttraining's amex_metric: 0.843572\tvalid_1's binary_logloss: 0.249898\tvalid_1's amex_metric: 0.789703\n","[1700]\ttraining's binary_logloss: 0.208507\ttraining's amex_metric: 0.847691\tvalid_1's binary_logloss: 0.24941\tvalid_1's amex_metric: 0.790512\n","[1800]\ttraining's binary_logloss: 0.206289\ttraining's amex_metric: 0.85025\tvalid_1's binary_logloss: 0.248727\tvalid_1's amex_metric: 0.789407\n","[1900]\ttraining's binary_logloss: 0.2036\ttraining's amex_metric: 0.854304\tvalid_1's binary_logloss: 0.24832\tvalid_1's amex_metric: 0.789494\n","[2000]\ttraining's binary_logloss: 0.20039\ttraining's amex_metric: 0.858416\tvalid_1's binary_logloss: 0.247716\tvalid_1's amex_metric: 0.789702\n","[2100]\ttraining's binary_logloss: 0.198132\ttraining's amex_metric: 0.861755\tvalid_1's binary_logloss: 0.247211\tvalid_1's amex_metric: 0.790364\n","[2200]\ttraining's binary_logloss: 0.19637\ttraining's amex_metric: 0.864301\tvalid_1's binary_logloss: 0.246984\tvalid_1's amex_metric: 0.789977\n","Early stopping, best iteration is:\n","[1700]\ttraining's binary_logloss: 0.208507\ttraining's amex_metric: 0.847691\tvalid_1's binary_logloss: 0.24941\tvalid_1's amex_metric: 0.790512\n","You can get best model by \"DartEarlyStopping.best_model\"\n","\u001b[32m\u001b[1mFold 5 \n"," 52:35 \n"," CV Score = 0.7892\u001b[0m\n","\u001b[32m\u001b[1m SEED 42 COPELETE \u001b[0m\n","--------------------------------------------------\n","\u001b[32m\u001b[1m SEED 52 STRAT \u001b[0m\n","[100]\ttraining's binary_logloss: 0.31588\ttraining's amex_metric: 0.757953\tvalid_1's binary_logloss: 0.316111\tvalid_1's amex_metric: 0.757842\n","[200]\ttraining's binary_logloss: 0.276228\ttraining's amex_metric: 0.774721\tvalid_1's binary_logloss: 0.278105\tvalid_1's amex_metric: 0.7721\n","[300]\ttraining's binary_logloss: 0.262644\ttraining's amex_metric: 0.784117\tvalid_1's binary_logloss: 0.266124\tvalid_1's amex_metric: 0.778665\n","[400]\ttraining's binary_logloss: 0.252862\ttraining's amex_metric: 0.793493\tvalid_1's binary_logloss: 0.259198\tvalid_1's amex_metric: 0.785865\n","[500]\ttraining's binary_logloss: 0.249826\ttraining's amex_metric: 0.798343\tvalid_1's binary_logloss: 0.257356\tvalid_1's amex_metric: 0.787837\n","[600]\ttraining's binary_logloss: 0.246803\ttraining's amex_metric: 0.802336\tvalid_1's binary_logloss: 0.256071\tvalid_1's amex_metric: 0.790136\n","[700]\ttraining's binary_logloss: 0.244477\ttraining's amex_metric: 0.805131\tvalid_1's binary_logloss: 0.25522\tvalid_1's amex_metric: 0.789738\n","[800]\ttraining's binary_logloss: 0.239581\ttraining's amex_metric: 0.809613\tvalid_1's binary_logloss: 0.252598\tvalid_1's amex_metric: 0.792296\n","[900]\ttraining's binary_logloss: 0.235689\ttraining's amex_metric: 0.813919\tvalid_1's binary_logloss: 0.250968\tvalid_1's amex_metric: 0.79218\n","[1000]\ttraining's binary_logloss: 0.232734\ttraining's amex_metric: 0.817757\tvalid_1's binary_logloss: 0.249979\tvalid_1's amex_metric: 0.793403\n","[1100]\ttraining's binary_logloss: 0.229384\ttraining's amex_metric: 0.822148\tvalid_1's binary_logloss: 0.248936\tvalid_1's amex_metric: 0.794709\n","[1200]\ttraining's binary_logloss: 0.227083\ttraining's amex_metric: 0.824768\tvalid_1's binary_logloss: 0.247834\tvalid_1's amex_metric: 0.793899\n","[1300]\ttraining's binary_logloss: 0.225252\ttraining's amex_metric: 0.82666\tvalid_1's binary_logloss: 0.247708\tvalid_1's amex_metric: 0.794997\n","[1400]\ttraining's binary_logloss: 0.22221\ttraining's amex_metric: 0.829\tvalid_1's binary_logloss: 0.246712\tvalid_1's amex_metric: 0.794521\n","[1500]\ttraining's binary_logloss: 0.217772\ttraining's amex_metric: 0.834032\tvalid_1's binary_logloss: 0.245375\tvalid_1's amex_metric: 0.795462\n","[1600]\ttraining's binary_logloss: 0.215683\ttraining's amex_metric: 0.836737\tvalid_1's binary_logloss: 0.245224\tvalid_1's amex_metric: 0.795728\n","[1700]\ttraining's binary_logloss: 0.212233\ttraining's amex_metric: 0.840601\tvalid_1's binary_logloss: 0.244418\tvalid_1's amex_metric: 0.796017\n","[1800]\ttraining's binary_logloss: 0.209708\ttraining's amex_metric: 0.844393\tvalid_1's binary_logloss: 0.243947\tvalid_1's amex_metric: 0.796555\n","[1900]\ttraining's binary_logloss: 0.20657\ttraining's amex_metric: 0.848642\tvalid_1's binary_logloss: 0.243264\tvalid_1's amex_metric: 0.796551\n","[2000]\ttraining's binary_logloss: 0.204106\ttraining's amex_metric: 0.851921\tvalid_1's binary_logloss: 0.242683\tvalid_1's amex_metric: 0.796373\n","[2100]\ttraining's binary_logloss: 0.201039\ttraining's amex_metric: 0.85656\tvalid_1's binary_logloss: 0.241855\tvalid_1's amex_metric: 0.796273\n","[2200]\ttraining's binary_logloss: 0.198521\ttraining's amex_metric: 0.860771\tvalid_1's binary_logloss: 0.241519\tvalid_1's amex_metric: 0.796549\n","[2300]\ttraining's binary_logloss: 0.195751\ttraining's amex_metric: 0.864114\tvalid_1's binary_logloss: 0.241131\tvalid_1's amex_metric: 0.797362\n","[2400]\ttraining's binary_logloss: 0.19317\ttraining's amex_metric: 0.867458\tvalid_1's binary_logloss: 0.240649\tvalid_1's amex_metric: 0.797002\n","[2500]\ttraining's binary_logloss: 0.190648\ttraining's amex_metric: 0.871148\tvalid_1's binary_logloss: 0.239821\tvalid_1's amex_metric: 0.797361\n","[2600]\ttraining's binary_logloss: 0.188576\ttraining's amex_metric: 0.874067\tvalid_1's binary_logloss: 0.239335\tvalid_1's amex_metric: 0.797288\n","[2700]\ttraining's binary_logloss: 0.186938\ttraining's amex_metric: 0.877487\tvalid_1's binary_logloss: 0.239539\tvalid_1's amex_metric: 0.797121\n","[2800]\ttraining's binary_logloss: 0.184055\ttraining's amex_metric: 0.881212\tvalid_1's binary_logloss: 0.238902\tvalid_1's amex_metric: 0.797748\n","[2900]\ttraining's binary_logloss: 0.1808\ttraining's amex_metric: 0.886035\tvalid_1's binary_logloss: 0.238468\tvalid_1's amex_metric: 0.797699\n","[3000]\ttraining's binary_logloss: 0.178232\ttraining's amex_metric: 0.890454\tvalid_1's binary_logloss: 0.238007\tvalid_1's amex_metric: 0.797755\n","[3100]\ttraining's binary_logloss: 0.175932\ttraining's amex_metric: 0.894105\tvalid_1's binary_logloss: 0.237739\tvalid_1's amex_metric: 0.798449\n","[3200]\ttraining's binary_logloss: 0.173056\ttraining's amex_metric: 0.898886\tvalid_1's binary_logloss: 0.237255\tvalid_1's amex_metric: 0.798419\n","[3300]\ttraining's binary_logloss: 0.171112\ttraining's amex_metric: 0.902451\tvalid_1's binary_logloss: 0.237\tvalid_1's amex_metric: 0.798096\n","[3400]\ttraining's binary_logloss: 0.168755\ttraining's amex_metric: 0.906451\tvalid_1's binary_logloss: 0.236773\tvalid_1's amex_metric: 0.798708\n","[3500]\ttraining's binary_logloss: 0.16659\ttraining's amex_metric: 0.909592\tvalid_1's binary_logloss: 0.236397\tvalid_1's amex_metric: 0.799148\n","[3600]\ttraining's binary_logloss: 0.164531\ttraining's amex_metric: 0.913253\tvalid_1's binary_logloss: 0.236164\tvalid_1's amex_metric: 0.798348\n","[3700]\ttraining's binary_logloss: 0.162239\ttraining's amex_metric: 0.916579\tvalid_1's binary_logloss: 0.23592\tvalid_1's amex_metric: 0.798414\n","[3800]\ttraining's binary_logloss: 0.160104\ttraining's amex_metric: 0.920202\tvalid_1's binary_logloss: 0.235738\tvalid_1's amex_metric: 0.797834\n","[3900]\ttraining's binary_logloss: 0.157796\ttraining's amex_metric: 0.923497\tvalid_1's binary_logloss: 0.235569\tvalid_1's amex_metric: 0.797063\n","[4000]\ttraining's binary_logloss: 0.155651\ttraining's amex_metric: 0.926968\tvalid_1's binary_logloss: 0.235434\tvalid_1's amex_metric: 0.796979\n","Early stopping, best iteration is:\n","[3503]\ttraining's binary_logloss: 0.166484\ttraining's amex_metric: 0.909741\tvalid_1's binary_logloss: 0.236386\tvalid_1's amex_metric: 0.799379\n","You can get best model by \"DartEarlyStopping.best_model\"\n","\u001b[32m\u001b[1mFold 1 \n"," 38:31 \n"," CV Score = 0.7985\u001b[0m\n","[100]\ttraining's binary_logloss: 0.315303\ttraining's amex_metric: 0.757539\tvalid_1's binary_logloss: 0.319526\tvalid_1's amex_metric: 0.747935\n","[200]\ttraining's binary_logloss: 0.275469\ttraining's amex_metric: 0.776428\tvalid_1's binary_logloss: 0.282369\tvalid_1's amex_metric: 0.765803\n","[300]\ttraining's binary_logloss: 0.26167\ttraining's amex_metric: 0.785981\tvalid_1's binary_logloss: 0.270451\tvalid_1's amex_metric: 0.772922\n","[400]\ttraining's binary_logloss: 0.252189\ttraining's amex_metric: 0.796327\tvalid_1's binary_logloss: 0.264103\tvalid_1's amex_metric: 0.778759\n","[500]\ttraining's binary_logloss: 0.249141\ttraining's amex_metric: 0.799236\tvalid_1's binary_logloss: 0.262361\tvalid_1's amex_metric: 0.779822\n","[600]\ttraining's binary_logloss: 0.246003\ttraining's amex_metric: 0.80348\tvalid_1's binary_logloss: 0.260786\tvalid_1's amex_metric: 0.782224\n","[700]\ttraining's binary_logloss: 0.243431\ttraining's amex_metric: 0.80702\tvalid_1's binary_logloss: 0.259563\tvalid_1's amex_metric: 0.783503\n","[800]\ttraining's binary_logloss: 0.238546\ttraining's amex_metric: 0.811527\tvalid_1's binary_logloss: 0.256853\tvalid_1's amex_metric: 0.785532\n","[900]\ttraining's binary_logloss: 0.234404\ttraining's amex_metric: 0.815701\tvalid_1's binary_logloss: 0.254883\tvalid_1's amex_metric: 0.786836\n","[1000]\ttraining's binary_logloss: 0.231893\ttraining's amex_metric: 0.819859\tvalid_1's binary_logloss: 0.254257\tvalid_1's amex_metric: 0.788807\n","[1100]\ttraining's binary_logloss: 0.227928\ttraining's amex_metric: 0.823854\tvalid_1's binary_logloss: 0.252681\tvalid_1's amex_metric: 0.789214\n","[1200]\ttraining's binary_logloss: 0.22622\ttraining's amex_metric: 0.826184\tvalid_1's binary_logloss: 0.252315\tvalid_1's amex_metric: 0.788768\n","[1300]\ttraining's binary_logloss: 0.224314\ttraining's amex_metric: 0.82848\tvalid_1's binary_logloss: 0.252147\tvalid_1's amex_metric: 0.787851\n","[1400]\ttraining's binary_logloss: 0.221488\ttraining's amex_metric: 0.831114\tvalid_1's binary_logloss: 0.251244\tvalid_1's amex_metric: 0.788423\n","[1500]\ttraining's binary_logloss: 0.217113\ttraining's amex_metric: 0.835542\tvalid_1's binary_logloss: 0.249944\tvalid_1's amex_metric: 0.789206\n","Early stopping, best iteration is:\n","[1085]\ttraining's binary_logloss: 0.227998\ttraining's amex_metric: 0.823265\tvalid_1's binary_logloss: 0.252625\tvalid_1's amex_metric: 0.789858\n","You can get best model by \"DartEarlyStopping.best_model\"\n","\u001b[32m\u001b[1mFold 2 \n"," 38:18 \n"," CV Score = 0.7889\u001b[0m\n","[100]\ttraining's binary_logloss: 0.315087\ttraining's amex_metric: 0.758011\tvalid_1's binary_logloss: 0.317567\tvalid_1's amex_metric: 0.753156\n","[200]\ttraining's binary_logloss: 0.275427\ttraining's amex_metric: 0.776599\tvalid_1's binary_logloss: 0.280509\tvalid_1's amex_metric: 0.766452\n","[300]\ttraining's binary_logloss: 0.261944\ttraining's amex_metric: 0.785693\tvalid_1's binary_logloss: 0.26881\tvalid_1's amex_metric: 0.771994\n","[400]\ttraining's binary_logloss: 0.25255\ttraining's amex_metric: 0.794973\tvalid_1's binary_logloss: 0.262361\tvalid_1's amex_metric: 0.777509\n","[500]\ttraining's binary_logloss: 0.249605\ttraining's amex_metric: 0.799021\tvalid_1's binary_logloss: 0.260646\tvalid_1's amex_metric: 0.780943\n","[600]\ttraining's binary_logloss: 0.246498\ttraining's amex_metric: 0.803067\tvalid_1's binary_logloss: 0.259185\tvalid_1's amex_metric: 0.783488\n","[700]\ttraining's binary_logloss: 0.243768\ttraining's amex_metric: 0.806538\tvalid_1's binary_logloss: 0.25794\tvalid_1's amex_metric: 0.784022\n","[800]\ttraining's binary_logloss: 0.239109\ttraining's amex_metric: 0.811406\tvalid_1's binary_logloss: 0.255667\tvalid_1's amex_metric: 0.786266\n","[900]\ttraining's binary_logloss: 0.234881\ttraining's amex_metric: 0.815263\tvalid_1's binary_logloss: 0.253634\tvalid_1's amex_metric: 0.786926\n","[1000]\ttraining's binary_logloss: 0.231744\ttraining's amex_metric: 0.819425\tvalid_1's binary_logloss: 0.252644\tvalid_1's amex_metric: 0.786904\n","[1100]\ttraining's binary_logloss: 0.228661\ttraining's amex_metric: 0.823144\tvalid_1's binary_logloss: 0.252011\tvalid_1's amex_metric: 0.787037\n","[1200]\ttraining's binary_logloss: 0.226237\ttraining's amex_metric: 0.82594\tvalid_1's binary_logloss: 0.250682\tvalid_1's amex_metric: 0.787891\n","[1300]\ttraining's binary_logloss: 0.224399\ttraining's amex_metric: 0.828474\tvalid_1's binary_logloss: 0.250622\tvalid_1's amex_metric: 0.788006\n","[1400]\ttraining's binary_logloss: 0.221859\ttraining's amex_metric: 0.831216\tvalid_1's binary_logloss: 0.250149\tvalid_1's amex_metric: 0.787931\n","[1500]\ttraining's binary_logloss: 0.2174\ttraining's amex_metric: 0.836196\tvalid_1's binary_logloss: 0.248978\tvalid_1's amex_metric: 0.788866\n","[1600]\ttraining's binary_logloss: 0.215151\ttraining's amex_metric: 0.839625\tvalid_1's binary_logloss: 0.248499\tvalid_1's amex_metric: 0.789491\n","[1700]\ttraining's binary_logloss: 0.21118\ttraining's amex_metric: 0.843923\tvalid_1's binary_logloss: 0.247277\tvalid_1's amex_metric: 0.789098\n","[1800]\ttraining's binary_logloss: 0.20891\ttraining's amex_metric: 0.847003\tvalid_1's binary_logloss: 0.247022\tvalid_1's amex_metric: 0.789433\n","[1900]\ttraining's binary_logloss: 0.205458\ttraining's amex_metric: 0.851358\tvalid_1's binary_logloss: 0.246335\tvalid_1's amex_metric: 0.789843\n","[2000]\ttraining's binary_logloss: 0.202903\ttraining's amex_metric: 0.855156\tvalid_1's binary_logloss: 0.245851\tvalid_1's amex_metric: 0.789401\n","Early stopping, best iteration is:\n","[1582]\ttraining's binary_logloss: 0.216216\ttraining's amex_metric: 0.839067\tvalid_1's binary_logloss: 0.248827\tvalid_1's amex_metric: 0.790263\n","You can get best model by \"DartEarlyStopping.best_model\"\n","\u001b[32m\u001b[1mFold 3 \n"," 50:53 \n"," CV Score = 0.7891\u001b[0m\n","[100]\ttraining's binary_logloss: 0.314921\ttraining's amex_metric: 0.758411\tvalid_1's binary_logloss: 0.31759\tvalid_1's amex_metric: 0.752315\n","[200]\ttraining's binary_logloss: 0.275113\ttraining's amex_metric: 0.776223\tvalid_1's binary_logloss: 0.280183\tvalid_1's amex_metric: 0.767734\n","[300]\ttraining's binary_logloss: 0.262041\ttraining's amex_metric: 0.785414\tvalid_1's binary_logloss: 0.268847\tvalid_1's amex_metric: 0.77389\n","[400]\ttraining's binary_logloss: 0.252188\ttraining's amex_metric: 0.795984\tvalid_1's binary_logloss: 0.262209\tvalid_1's amex_metric: 0.780613\n","[500]\ttraining's binary_logloss: 0.249083\ttraining's amex_metric: 0.799461\tvalid_1's binary_logloss: 0.260413\tvalid_1's amex_metric: 0.783239\n","[600]\ttraining's binary_logloss: 0.246011\ttraining's amex_metric: 0.804126\tvalid_1's binary_logloss: 0.258956\tvalid_1's amex_metric: 0.785593\n","[700]\ttraining's binary_logloss: 0.243603\ttraining's amex_metric: 0.806775\tvalid_1's binary_logloss: 0.257899\tvalid_1's amex_metric: 0.787621\n","[800]\ttraining's binary_logloss: 0.239035\ttraining's amex_metric: 0.810267\tvalid_1's binary_logloss: 0.25564\tvalid_1's amex_metric: 0.787192\n","[900]\ttraining's binary_logloss: 0.234687\ttraining's amex_metric: 0.814297\tvalid_1's binary_logloss: 0.253586\tvalid_1's amex_metric: 0.789656\n","[1000]\ttraining's binary_logloss: 0.232114\ttraining's amex_metric: 0.818542\tvalid_1's binary_logloss: 0.253032\tvalid_1's amex_metric: 0.789932\n","[1100]\ttraining's binary_logloss: 0.228664\ttraining's amex_metric: 0.822727\tvalid_1's binary_logloss: 0.25182\tvalid_1's amex_metric: 0.790973\n","[1200]\ttraining's binary_logloss: 0.226373\ttraining's amex_metric: 0.825435\tvalid_1's binary_logloss: 0.250873\tvalid_1's amex_metric: 0.790653\n","[1300]\ttraining's binary_logloss: 0.224451\ttraining's amex_metric: 0.828155\tvalid_1's binary_logloss: 0.250632\tvalid_1's amex_metric: 0.791544\n","[1400]\ttraining's binary_logloss: 0.221724\ttraining's amex_metric: 0.830541\tvalid_1's binary_logloss: 0.249939\tvalid_1's amex_metric: 0.791796\n","[1500]\ttraining's binary_logloss: 0.217719\ttraining's amex_metric: 0.835727\tvalid_1's binary_logloss: 0.248966\tvalid_1's amex_metric: 0.790645\n","[1600]\ttraining's binary_logloss: 0.215167\ttraining's amex_metric: 0.838501\tvalid_1's binary_logloss: 0.248189\tvalid_1's amex_metric: 0.790679\n","Early stopping, best iteration is:\n","[1137]\ttraining's binary_logloss: 0.227568\ttraining's amex_metric: 0.82384\tvalid_1's binary_logloss: 0.251605\tvalid_1's amex_metric: 0.791979\n","You can get best model by \"DartEarlyStopping.best_model\"\n","\u001b[32m\u001b[1mFold 4 \n"," 39:01 \n"," CV Score = 0.7900\u001b[0m\n","[100]\ttraining's binary_logloss: 0.314602\ttraining's amex_metric: 0.758364\tvalid_1's binary_logloss: 0.317708\tvalid_1's amex_metric: 0.749884\n","[200]\ttraining's binary_logloss: 0.274493\ttraining's amex_metric: 0.777405\tvalid_1's binary_logloss: 0.280133\tvalid_1's amex_metric: 0.765617\n","[300]\ttraining's binary_logloss: 0.261118\ttraining's amex_metric: 0.785966\tvalid_1's binary_logloss: 0.268691\tvalid_1's amex_metric: 0.771433\n","[400]\ttraining's binary_logloss: 0.251967\ttraining's amex_metric: 0.795668\tvalid_1's binary_logloss: 0.262882\tvalid_1's amex_metric: 0.777759\n","[500]\ttraining's binary_logloss: 0.248699\ttraining's amex_metric: 0.799557\tvalid_1's binary_logloss: 0.261001\tvalid_1's amex_metric: 0.778841\n","[600]\ttraining's binary_logloss: 0.245622\ttraining's amex_metric: 0.80281\tvalid_1's binary_logloss: 0.259641\tvalid_1's amex_metric: 0.781243\n","[700]\ttraining's binary_logloss: 0.24325\ttraining's amex_metric: 0.806151\tvalid_1's binary_logloss: 0.258844\tvalid_1's amex_metric: 0.782221\n","[800]\ttraining's binary_logloss: 0.238086\ttraining's amex_metric: 0.810655\tvalid_1's binary_logloss: 0.256219\tvalid_1's amex_metric: 0.782686\n","[900]\ttraining's binary_logloss: 0.234039\ttraining's amex_metric: 0.815083\tvalid_1's binary_logloss: 0.254561\tvalid_1's amex_metric: 0.785246\n","[1000]\ttraining's binary_logloss: 0.231544\ttraining's amex_metric: 0.819233\tvalid_1's binary_logloss: 0.254117\tvalid_1's amex_metric: 0.784757\n"]}],"source":["SEEDS = [42, 52, 62]\n","\n","for SEED in SEEDS:\n","    seed_everything(SEED)\n","    print('-'*50)\n","    print(f\"{Fore.GREEN}{Style.BRIGHT} SEED {SEED} STRAT {Style.RESET_ALL}\")\n","    DEBUG = False\n","\n","    n_fold = 5\n","\n","    # set LGBM\n","    params = {\n","        'seed':SEED,\n","        'device_type' : 'gpu',\n","        'objective': \"binary\",\n","        'metric' : 'binary_logloss',\n","        'boosting': 'dart',\n","        'is_unbalance' : True,\n","        'lambda_l2' : 2,\n","        'learning_rate': 0.05,\n","        'feature_fraction': 0.2,\n","        'num_leaves' : 100,\n","        'min_data_in_leaf' : 40,\n","        'extra_trees' : True,\n","        'bagging_seed': SEED,\n","        'bagging_freq': 10,\n","        'bagging_fraction':0.5,\n","        'verbosity' : -1,\n","        'n_jobs':-1\n","    }\n","\n","    # set K-fold\n","    kf = StratifiedKFold(n_splits=n_fold, shuffle=True, random_state = SEED)\n","    \n","    score_list = [] \n","    importances = []\n","\n","    for fold, (idx_tr, idx_va) in enumerate(kf.split(X, y)):\n","        \n","        X_tr, X_va, y_tr, y_va, model = None, None, None, None, None\n","        start_time = datetime.datetime.now()\n","        \n","        X_tr = X.iloc[idx_tr]\n","        X_va = X.iloc[idx_va]\n","        y_tr = y.iloc[idx_tr]\n","        y_va = y.iloc[idx_va]\n","        INPUT_TRAIN = lgb.Dataset(X_tr, \n","                                label = y_tr,\n","                                categorical_feature = featCat\n","                                )\n","        \n","        INPUT_VALID = lgb.Dataset(X_va, \n","                                label = y_va,\n","                                categorical_feature = featCat, \n","                                reference=INPUT_TRAIN)\n","\n","        EARLY_STOPPING = DartEarlyStopping(\"valid_1\", \"amex_metric\", 500)\n","\n","        with warnings.catch_warnings():\n","            warnings.filterwarnings('ignore', category=UserWarning)\n","        \n","            n_rounds = 100 if DEBUG else 10000\n","\n","            model = lgb.train(params,\n","                            train_set = INPUT_TRAIN,\n","                            valid_sets=[INPUT_TRAIN, INPUT_VALID],\n","                            num_boost_round = n_rounds,\n","                            feval = lgb_amex_metric,\n","                            callbacks = [log_evaluation(100), EARLY_STOPPING]\n","                    )\n","            \n","        del X_tr, y_tr; gc.collect()    \n","        \n","        y_va_pred = model.predict(X_va, raw_score=True)\n","        score = amex_metric(y_va.reset_index(drop=True), y_va_pred)\n","        \n","        del X_va, y_va; gc.collect()\n","\n","        n_trees = EARLY_STOPPING.best_model\n","\n","        OUTPUT_PRED += model.predict(INPUT_TEST) / n_fold\n","        importances.append(model.feature_importance(importance_type='gain'))\n","        \n","        print(f\"{Fore.GREEN}{Style.BRIGHT}Fold {fold+1} \\n {str(datetime.datetime.now() - start_time)[-12:-7]} \\n\"\n","            f\" CV Score = {score:.4f}{Style.RESET_ALL}\")\n","        \n","        del y_va_pred, score, model, EARLY_STOPPING, n_trees  \n","        gc.collect() \n","\n","    print(f\"{Fore.GREEN}{Style.BRIGHT} SEED {SEED} COPELETE {Style.RESET_ALL}\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"bM4jhypOsFU4"},"outputs":[],"source":["def plot_importance(importances, features, PLOT_TOP_N = 20, figsize=(10, 10)):\n","    importance_df = pd.DataFrame(data=importances, columns=features)\n","    importance_df.to_pickle('feature_importance/lgbm.pkl')\n","    sorted_indices = importance_df.median(axis=0).sort_values(ascending=False).index\n","    sorted_importance_df = importance_df.loc[:, sorted_indices]\n","    plot_cols = sorted_importance_df.columns[:PLOT_TOP_N]\n","    _, ax = plt.subplots(figsize=figsize)\n","    ax.grid()\n","    ax.set_xscale('log')\n","    ax.set_ylabel('Feature')\n","    ax.set_xlabel('Importance')\n","    sns.boxplot(data=sorted_importance_df[plot_cols],\n","                orient='h',\n","                ax=ax)\n","    plt.show()\n","\n","plot_importance(np.array(importances), FEATURES, PLOT_TOP_N = 100, figsize=(10, 100))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ZGLIvygZgl7s"},"outputs":[],"source":["OUTPUT['prediction'] = OUTPUT_PRED / len(SEEDS)\n","OUTPUT.to_csv('Output/003_LGBM.csv', index=False)"]}],"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":["p71WUtK64WK2","0KC-zIhf6s04","Ii62mI0Gz00s"],"machine_shape":"hm","provenance":[],"authorship_tag":"ABX9TyMQxJ44QVhPijmP/2MsBqnH"},"gpuClass":"standard","kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}